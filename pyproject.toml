[project]
name = "personality-classification"
version = "0.1.0"
description = "Six-Stack Personality Classification Pipeline with Advanced ML Ensemble Methods"
authors = [
    {name = "Jeremy Vachier"}
]
readme = "README.md"
requires-python = ">=3.11,<3.13"
license = {file = "LICENSE"}
keywords = ["machine-learning", "personality-classification", "ensemble", "optuna", "data-science"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML libraries
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0",
    "scikit-learn>=1.3.0,<1.6.0",

    # Advanced ML models (gradient boosting)
    "catboost>=1.2.0,<2.0.0",
    "lightgbm>=4.0.0,<5.0.0",
    "xgboost>=2.0.0,<3.0.0",

    # Statistical computing and preprocessing
    "scipy>=1.11.0,<2.0.0",
    "imbalanced-learn>=0.11.0,<1.0.0",  # For SMOTE data augmentation

    # Hyperparameter optimization
    "optuna>=3.4.0,<4.0.0",

    # Data augmentation and synthetic data generation
    "sdv>=1.24.0,<2.0.0",  # For advanced synthetic data

    # Model serialization and utilities
    "joblib>=1.3.0,<2.0.0",

    # Web application framework
    "dash>=2.14.0,<3.0.0",
]

[project.optional-dependencies]
automl = [
    "autogluon>=1.1.1,<2.0.0",
    "h2o>=3.44.0,<4.0.0",
]
dev = [
    # Testing
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",  # Parallel testing

    # Code formatting and linting
    "ruff>=0.4.0,<1.0.0",

    # Type checking
    "mypy>=1.5.0,<2.0.0",
    "types-requests>=2.31.0,<3.0.0",
    "types-PyYAML>=6.0.0,<7.0.0",

    # Security and quality
    "bandit>=1.7.0,<2.0.0",
    "pydocstyle>=6.3.0,<7.0.0",

    # Pre-commit hooks
    "pre-commit>=3.3.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/jeremyvachier/personality-classification"
Repository = "https://github.com/jeremyvachier/personality-classification"
Documentation = "https://github.com/jeremyvachier/personality-classification/blob/main/README.md"
"Bug Tracker" = "https://github.com/jeremyvachier/personality-classification/issues"

[project.scripts]
personality-classify = "src.main_modular:main"
personality-demo = "src.main_demo:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatchling configuration
[tool.hatch.build.targets.wheel]
include = [
    "src/**/*.py",
    "README.md",
    "LICENSE",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "data/",
    "docs/",
    "tests/",
    "README.md",
    "LICENSE",
    "pyproject.toml",
    "Makefile",
]

# UV configuration
[tool.uv]
dev-dependencies = [
    "ruff>=0.12.2,<1.0.0",
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
    "bandit>=1.7.0,<2.0.0",
    "pydocstyle>=6.3.0,<7.0.0",
]

# Pre-commit configuration
[tool.pre-commit]
default_language_version.python = "python3.11"

# Ruff configuration (fast Python linter)
[tool.ruff]
line-length = 88
target-version = "py311"
src = ["src", "tests", "scripts"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "PL",   # pylint
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by black)
    "B905",   # `zip()` without an explicit `strict=` parameter
    "B904",   # raise exceptions with `raise ... from err` (false positives in pre-commit)
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**" = ["PLR2004"]  # Allow magic values in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Bandit configuration (security linting)
[tool.bandit]
exclude_dirs = ["tests", "scripts", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in paramiko

# Pydocstyle configuration (docstring linting)
[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105"]  # Allow missing docstrings for modules, packages, magic methods
