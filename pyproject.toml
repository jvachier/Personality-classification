[project]
name = "personality-classification"
version = "0.1.0"
description = "Six-Stack Personality Classification Pipeline with Advanced ML Ensemble Methods"
authors = [
    {name = "Jeremy Vachier"}
]
readme = "README.md"
requires-python = ">=3.11,<3.13"
license = {file = "LICENSE"}
keywords = ["machine-learning", "personality-classification", "ensemble", "optuna", "data-science"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core ML libraries
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0,<3.0.0", 
    "scikit-learn>=1.3.0,<1.6.0",
    
    # Advanced ML models
    "catboost>=1.2.0,<2.0.0",
    "lightgbm>=4.0.0,<5.0.0",
    "xgboost>=2.0.0,<3.0.0",
    
    # Deep learning and neural networks
    "torch>=2.0.0,<3.0.0",
    "pytorch-tabnet>=4.1.0,<5.0.0",
    
    # Feature engineering and preprocessing
    "category-encoders>=2.6.0,<3.0.0",
    "imbalanced-learn>=0.11.0,<1.0.0",
    "scipy>=1.11.0,<2.0.0",
    
    # Hyperparameter optimization
    "optuna>=3.4.0,<4.0.0",
    
    # Data augmentation and synthetic data
    "sdv>=1.24.0,<2.0.0",
    
    # Plotting and visualization
    "matplotlib>=3.6.0,<4.0.0",
    "seaborn>=0.11.0,<1.0.0",
    
    # Progress bars and utilities
    "tqdm>=4.65.0,<5.0.0",
    "typing-extensions>=4.7.0,<5.0.0",
]

[project.optional-dependencies]
automl = [
    "autogluon>=1.1.1,<2.0.0",
    "h2o>=3.44.0,<4.0.0",
]
dev = [
    "jupyter>=1.0.0,<2.0.0",
    "notebook>=7.0.0,<8.0.0", 
    "ipython>=8.12.0,<9.0.0",
    "ipykernel>=6.25.0,<7.0.0",
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "black>=23.7.0,<25.0.0",
    "isort>=5.12.0,<6.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/jeremyvachier/personality-classification"
Repository = "https://github.com/jeremyvachier/personality-classification"
Documentation = "https://github.com/jeremyvachier/personality-classification/blob/main/README.md"
"Bug Tracker" = "https://github.com/jeremyvachier/personality-classification/issues"

[project.scripts]
personality-classify = "src.main_modular:main"
personality-demo = "src.main_demo:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Hatchling configuration
[tool.hatch.build.targets.wheel]
include = [
    "src/**/*.py",
    "README.md",
    "LICENSE",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "data/",
    "docs/",
    "tests/",
    "README.md",
    "LICENSE",
    "pyproject.toml",
    "Makefile",
]

# UV configuration
[tool.uv]
dev-dependencies = [
    "ruff>=0.12.2,<1.0.0",
    "jupyter>=1.0.0,<2.0.0",
    "notebook>=7.0.0,<8.0.0",
    "ipython>=8.12.0,<9.0.0",
    "ipykernel>=6.25.0,<7.0.0",
    "pytest>=7.4.0,<8.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.3.0,<4.0.0",
]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
show-fixes = true

include = ["src/**/*.py", "tests/**/*.py", "scripts/**/*.py"]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist", 
    "*.egg-info",
    "catboost_info",
    ".ipynb_checkpoints",
    "logs/",
    "submissions/",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PL",  # Pylint
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "B008",    # Do not perform function calls in argument defaults
    "B905",    # zip() without an explicit strict= parameter
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PLC0414", # Import alias does not rename original package
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ARG", "PLR"]
"scripts/**/*.py" = ["T201"]  # Allow print statements in scripts

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "catboost.*",
    "lightgbm.*", 
    "xgboost.*",
    "optuna.*",
    "sdv.*",
    "pytorch_tabnet.*",
    "category_encoders.*",
    "imblearn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "src/**/__init__.py",
    "tests/**",
    "scripts/**",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
